1.1.1. RegisterUser
-- Косая запись: нет, тк нет изменения данных.
-- Фантомная запись: нет, чтение происходит единажды.
-- Неповторяемое чтение: нет, чтение происходит единажды. 
-- Грязное чтение: да, так как может поменяться id у какого-нибудь пользователя, а RegisterUser перезатрет его при вставке. 
start transaction read write isolation level read commited;

1.1.2. ManageFlight
-- Косая запись: да, тк изменение данных.
-- Фантомная запись: нет, чтение происходит единажды.
-- Неповторяемое чтение: нет, чтение происходит единажды.
-- Грязное чтение: да, может измениться время у рейса.
start transaction read write isolation level serializable;

1.2.1. FreeSeats
-- Косая запись: нет, мы обновляем данные, а не изменяем существующие
-- Фантомная запись: нет, мы читаем только один раз.
-- Неповторяемое чтение: нет, мы читаем только один раз.
-- Грязное чтение: да, например кто-то купил/забронировал (или наоборот отменил бронь).
start transaction read only isolation level read committed;

1.2.2. Reserve
-- Косая запись: да, тк мы обновляем данные, основанные на одних и тех же данных.
-- Например забронируем одно и то же место => неконсистентный результат. 
-- Фантомная запись: да, пока бронируем конкретное место, кто-то его уже купил/забронировал.
-- Неповторяемое чтение: да, пока бронируем конкретное место, кто-то его уже купил.
-- Грязное чтение: да, кто-то уже занял выбранное место. 
start transaction read write isolation level serializable;

1.2.3. ExtendReservation
-- Косая запись: да, например можно отключить возможность бронирования у конкретного рейса. 		
-- Фантомная запись: да, например кто-то уже забронировал выбранное место. 
-- Неповторяемое чтение: да, например кто-то уже забронировал выбранное место. 
-- Грязное чтение: да, например в другой транзакции отключена возможность бронирования рейса (ReservationAllowed).
start transaction read write isolation level serializable;

1.2.4. BuyFree
-- Косая запись: нет, тк нет обновления данных. 
-- Фантомная запись: нет, добавление записей не повлияет.	 
-- Неповторяемое чтение: да, например изменение SellAllowed у рейса.
-- Грязное чтение: да, кто-то выкупил выбранное место. 
start transaction read write isolation level repeatable read;

1.2.5. BuyReserved
-- Косая запись: да, например отключение возможности резервации у конкретного рейса.
-- Фантомная запись: нет, добавление записей не повлияет. Каждое из отношений читаю единажды.
-- Неповторяемое чтение: нет, добавление записей не повлияет. Каждое из отношений читаю единажды. 
-- Грязное чтение: да, например отключение возможности резервации у конкретного рейса.
start transaction read write isolation level serializable;

1.3.1. FlightsStatistics
-- Косая запись: нет, тк нет обновления данных. 
-- Фантомная запись: да, у нас три select'a к одной и той же таблице Seats. Поэтому добавление записей в Seats повлияет на итоговый результат.  
-- Неповторяемое чтение: да, аналогично фантомной записи, только вместо добавления -- изменение. 
-- Грязное чтение: да, поменяем дату отправления у какого-нибудь рейса, в FS считаем и после откатим обратно. Получим непредсказуемое поведение.
start transaction read only isolation level snapshot;

1.3.2. FlightStat
-- Косая запись: нет, тк нет обновления данных. 
-- Фантомная запись: нет, если кто-то купит/забронирует билет -- ничего страшного   
-- Неповторяемое чтение: нет, если кто-то купит/забронирует билет -- ничего страшного
-- Грязное чтение: да, будет неприятно если кто-то поменяет credentials пользователя, которые передали в FlightStat
start transaction read only isolation level read commited;

1.4. CompressSeats
-- Косая запись: да, тк изменение (вставка и удаление) данных.
-- Фантомная запись: да, например кто-то купит/забронирует билет. 
-- Неповторяемое чтение: да, например кто-то купит/забронирует билет.
-- Грязное чтение: да, например кто-то купит/забронирует билет. 
start transaction read write isolation level serializable;




