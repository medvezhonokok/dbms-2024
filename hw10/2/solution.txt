2.0. Общий план
Изложите общий план реализации, в том числе на каком этапе какие данные будут получены и как использованы
Предположим, мы имеем полноценное web2 приложение.

1. Пользователь заходит на сайт, на котором ему нужно выбрать рейс, информацию о котором он хочет получить. 

1'. Отправляется запрос с клиента на сервер, происходит валидация данных (по сути только то, что рейс с выбранным FlightId существует), в случае успешного ее прохождения, пользователю предоставляется информация о выбранном рейсе. В случае, если в процессе произошла ошибка - п.5'.

2. Пользователю предлагается выбрать место рейса и одно из действий:  Забронировать / Купить место.

3. Если пользователь выбрал "Забронировать", то необходимо аутентификация, просим пользователя авторизоваться. 

3'. Отправляется запрос с credentials пользователя на сервер, на нем происходит валидация и если она успешна, то сохраняем бронь пользователя на выбранный им рейс и п.5, иначе п.5'.

4. Если пользователь выбрал "Купить", то отправляется запрос на сервер с попыткой купить выбранное место, если успешно -- п.5, иначе п.5'.

5. Показываем пользователю alert об успешном выполнении. Оставляем на текущей странице (той, с которой был отправлен запрос на сервер).

5'. Показываем пользователю alert с ошибкой валидации (здесь еще может быть ошибка, если кто-то успел раньше выкупить/забронировать выбранное место), оставляем пользователя на текущей страничке, повторная аутентификация (если пользователь например ввел неверный пароль).

2.1. Запрос списка свободных мест
Приведите соответствующие SQL-запросы
start transaction read only isolation level read committed;

call FreeSeats(:FlightId);

commit and no chain;

2.2. Взаимодействие с пользователем
Укажите как будет релизовано взаимодействие с пользователем
Пользователю предоставляется форма, с помощью которой он может авторизоваться. 

Пользователь вводит данные в форму, которая отправляется на сервер.

На сервере, данные пользователя проходят валидацию, в случае неуспешной валидации - приходит ответ с сервера в виде сообщения об ошибке, которую пользователь увидит через alert, а если все успешно, то вернется та информация, которую пользователь запросил. 

Например, для "красивого" отображения ошибок, можно использовать библиотеку notify.js, при условии того, что фронтэнд написан на js.

2.3. Действия с местом
Приведите соответствующие SQL-запросы
-- если пользователь выбрал "Забронировать" 
start transaction read write isolation level serializable;

select Reserve(:UserId, :Pass, :FlightId, :SeatNo);

commit and no chain;

-- если пользователь выбрал "Купить" 
start transaction read write isolation level repeatable read;

select BuyFree(:FlightId, :SeatNo);

commit and no chain;
